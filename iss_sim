# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/bin/bash

# Path for RISC-V GCC toolchain
# You can install the toolchain from https://github.com/riscv/riscv-gcc
RISCV_TOOLCHAIN="XXX"
RISCV_GCC="$RISCV_TOOLCHAIN/bin/riscv64-unknown-elf-gcc"
RISCV_OBJCOPY="$RISCV_TOOLCHAIN/bin/riscv64-unknown-elf-objcopy"
RISCV_SPIKE="XXX"

# GCC compile options
ABI="lp64"
ISA="rv64imc"

DATE=`date +%Y-%m-%d`

# Instruction set simulator
ISS="spike" # other options: ovpsim, all

# riscv-ovpsim options
OVPSIM_VARIANT="RV64GC"
RISCV_OVPSIM="YOUR_PATH_HERE/riscv-ovpsim/bin/Linux64/riscvOVPsim.exe"

# Simulation output directory
SRC_DIR="./out_${DATE}/asm_tests"

find "$SRC_DIR" -name "*.S" > "$SRC_DIR/asm_test_list"

# Process command line options
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -iss)
    ISS="$2"
    shift
    ;;
    *)
    echo "unknown option $1"
    return
    ;;
esac
shift
done

# GCC compile
while read asm_test; do
  # Generate binary for RTL simulation
  SRC="$asm_test"
  OBJFILE="$asm_test.o"
  BINFILE="$asm_test.bin"
  GCC_CMD="$RISCV_GCC -march=$ISA -mabi=$ABI -static -mcmodel=medany \
           -fvisibility=hidden -nostdlib \
           -nostartfiles -I$RISCV_TESTS/env/p \
           -Tscripts/link.ld $SRC -o $OBJFILE"
  echo "Gcc compile :\n$GCC_CMD"
  $($GCC_CMD)
  echo "Convert $OBJFILE to $BINFILE"
  # Convert the ELF to plain binary
  # You can load this binary to your RTL simulation
  "$RISCV_OBJCOPY" -O binary "$OBJFILE" "$BINFILE"
done <"$SRC_DIR/asm_test_list"

find "$SRC_DIR" -name "*.o" > "$SRC_DIR/elf_list"

# Run spike simulation
if [[ "$ISS" == "spike" ]] || [[ "$ISS" == "all" ]]; then
  mkdir -p "$SRC_DIR/spike_sim"
  while read elf_file; do
    ELF="$elf_file"
    TEST_NAME=$(echo "$elf_file" | sed 's/^.*\///g')
    echo "Running spike: $TEST_NAME"
    LOGFILE="$SRC_DIR/spike_sim/$TEST_NAME.log"
    SPIKE_CMD="timeout 60s $RISCV_SPIKE --isa=$ISA -l $ELF &> $LOGFILE"
    echo "$SPIKE_CMD"
    $($SPIKE_CMD &> $LOGFILE)
  done <"$SRC_DIR/elf_list"
fi

# Run ovpsim simulation
if [[ "$ISS" == "ovpsim" ]] || [[ "$ISS" == "all" ]]; then
  mkdir -p "$SRC_DIR/riscv_ovpsim"
  while read elf_file; do
    ELF="$elf_file"
    TEST_NAME=$(echo "$elf_file" | sed 's/^.*\///g')
    echo "Running ovpsim : $TEST_NAME"
    LOGFILE="$SRC_DIR/riscv_ovpsim/$TEST_NAME.log"
    RISCV_OVPSIM_CMD="$RISCV_OVPSIM --variant $OVPSIM_VARIANT \
                      --override riscvOVPsim/cpu/PMP_registers=0 \
                      --override riscvOVPsim/cpu/simulateexceptions=T \
                      --trace --tracechange --traceshowicount --program $ELF \
                      --finishafter 1000000"
    $($RISCV_OVPSIM_CMD &> $LOGFILE)
  done <"$SRC_DIR/elf_list"
fi
